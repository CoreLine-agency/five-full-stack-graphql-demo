/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import * as cleanDeep from 'clean-deep';
import { Arg, Args, Ctx, FieldResolver, ID, Info, Int, Mutation, Query, Resolver, Root } from 'type-graphql';

import { addEagerFlags } from '../../utils/add-eager-flags';
import * as auth from '../../utils/auth/auth-checkers';
import { getFindOptions } from '../../utils/get-find-options';
import { resolveGetters } from '../../utils/resolve-getters';
import { EntityId, EntityIdScalar } from '../EntityId';
import { VoteCreateInput } from '../inputs/VoteCreateInput';
import { VoteEditInput } from '../inputs/VoteEditInput';
import { VoteSearchInput } from '../inputs/VoteSearchInput';
import { VoteSearchOrderInput } from '../inputs/VoteSearchOrderInput';
import { IRequestContext } from '../IRequestContext';
import { Vote } from '../models/Vote';
import { PaginatedResponse } from '../PaginationResponse';

// <keep-imports>
// </keep-imports>

const PaginatedVoteResponse = PaginatedResponse(Vote);

@Resolver(Vote)
export class VoteCrudResolver {
  @Query(() => Vote)
  public async vote(@Arg('id', () => EntityIdScalar) id: number, @Info() info, @Ctx() ctx: IRequestContext) {
    return addEagerFlags(await ctx.em.findOneOrFail(Vote, id, getFindOptions(Vote, info)));
  }

  @Query(() => PaginatedVoteResponse)
  public async searchVotes(
    @Arg('search', () => VoteSearchInput, { nullable: true }) search: VoteSearchInput | null = null,
    @Arg('skip', () => Int, { nullable: true }) skip: number = 0,
    @Arg('take', () => Int, { nullable: true }) take: number = 25,
    @Arg('order', () => [VoteSearchOrderInput], { nullable: true }) order: Array<VoteSearchOrderInput> = [],
    @Info() info,
    @Ctx() ctx: IRequestContext,
  ) {
    const defaultFindOptions = getFindOptions(Vote, info, { transformQueryPath: x => x.replace(/^items./, '') });

    const [items, total] = addEagerFlags(await ctx.em.findAndCount(Vote, cleanDeep({
      ...defaultFindOptions,
      skip,
      take,
      where: resolveGetters(search),
      order: Object.assign({}, ...order),
    })));

    return {
      items,
      total,
      hasMore: skip + take < total,
    };
  }

  @Query(() => [Vote])
  public async votes(@Info() info, @Ctx() ctx: IRequestContext) {
    return addEagerFlags(await ctx.em.find(Vote, getFindOptions(Vote, info)));
  }

  @Mutation(() => Vote)
  public async createVote(@Arg('input') input: VoteCreateInput, @Ctx() ctx: IRequestContext): Promise<Vote> {
    const model = new Vote();
    await model.update(input, ctx);

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation(() => Vote)
  public async updateVote(@Arg('input') input: VoteEditInput, @Ctx() ctx: IRequestContext) {
    const model = await ctx.em.findOneOrFail(Vote, input.id);
    await model.update(input, ctx);

    // <keep-update-code>
    // </keep-update-code>

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation(() => Boolean)
  public async deleteVotes(@Arg('ids', () => [ID]) ids: Array<EntityId>, @Ctx() ctx: IRequestContext): Promise<boolean> {
    const entities = await ctx.em.findByIds(Vote, ids);
    await auth.assertCanDelete(entities, ctx);
    await ctx.em.remove(entities);

    return true;
  }

  // <keep-methods>
  // </keep-methods>
}
